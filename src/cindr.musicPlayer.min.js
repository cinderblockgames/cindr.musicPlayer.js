const cindrM = new EventTarget; !function (e) { const n = { audio: document.createElement("audio"), volume: -1, muted: !1, index: -1, playlist: [], shuffled: [], shuffle: !1, repeat: "none", monitoring: null }; n.audio.addEventListener("ended", () => { "song" == n.repeat ? e.song.play() : !n.shuffle && n.index + 1 < n.playlist.length ? e.song.next() : n.shuffle && n.shuffled.indexOf(n.index) + 1 < n.shuffled.length ? e.song.next() : "playlist" == n.repeat ? e.playlist.play() : e.song.stop() }), n.audio.setAttribute("preload", "auto"), n.audio.addEventListener("timeupdate", () => d.timeupdate()), n.audio.addEventListener("progress", () => d.timeupdate()), n.audio.addEventListener("loadedmetadata", () => d.timeupdate()), n.audio.addEventListener("ended", () => d.end()), n.volume = 100 * n.audio.volume; const t = function (e, n) { return typeof e == typeof n && e < n }, i = function (e, n) { return typeof e == typeof n && e <= n }, o = function (e, n) { return typeof e == typeof n && e >= n }, a = { reset: function () { if (n.shuffle) { n.shuffled = [...Array(n.playlist.length).keys()].sort(() => Math.random() - .5); const e = n.shuffled.indexOf(n.index);[n.shuffled[0], n.shuffled[e]] = [n.shuffled[e], n.shuffled[0]] } else n.shuffled = [] }, next: function () { const e = n.shuffled.indexOf(n.index) + 1, t = e < n.shuffled.length ? e : 0; a.play(t) }, previous: function () { const e = n.shuffled.indexOf(n.index), t = (e > 0 ? e : n.shuffled.length) - 1; a.play(t) }, play: function (e) { n.index = n.shuffled[e], n.audio.pause(), n.audio.currentTime = 0, n.audio.src = n.playlist[n.index].url, n.audio.play(), d.songchange(), d.play() } }, l = { songList: function (e) { const t = e.detail; for (; n.monitoring.songList.firstChild;)n.monitoring.songList.removeChild(n.monitoring.songList.lastChild); t.playlist.forEach((e, i) => { const o = n.monitoring.songListTemplate.cloneNode(!0); o.id += "-" + i, l.song(o, { song: e, index: i, "index-readable": i + 1 }, { clean: !0, current: i == t.index }), n.monitoring.songList.appendChild(o) }) }, currentSongInfo: function (e) { const t = e.detail; if (l.song(document, t), n.monitoring) { const e = n.monitoring.songList.querySelectorAll('[id*="cindrM-song-container-"]'); for (let n = 0; n < e.length; n++) { const i = e[n]; n == t.index ? i.classList.add("cindrM-current-song") : i.classList.remove("cindrM-current-song") } } }, currentTime: function (e) { const n = e.detail; l.meta(document, n) }, playControl: function () { document.querySelectorAll('[data-cindrM-control~="play"]').forEach(e => e.classList.add("cindrM-playing")), ["pause", "stop"].forEach(e => { document.querySelectorAll('[data-cindrM-control~="' + e + '"]').forEach(e => e.classList.remove("cindrM-paused")) }) }, pauseControl: function () { document.querySelectorAll('[data-cindrM-control~="play"]').forEach(e => e.classList.remove("cindrM-playing")), ["pause", "stop"].forEach(e => { document.querySelectorAll('[data-cindrM-control~="' + e + '"]').forEach(e => e.classList.add("cindrM-paused")) }) }, shuffleControl: function (e) { const n = document.querySelectorAll('[data-cindrM-control~="shuffle"]'); e.detail.shuffle ? n.forEach(e => e.classList.add("cindrM-shuffling")) : n.forEach(e => e.classList.remove("cindrM-shuffling")) }, repeatControl: function (e) { const n = e.detail.repeat, t = document.querySelectorAll('[data-cindrM-control~="repeat"]'); "none" == n ? t.forEach(e => { e.classList.remove("cindrM-repeating-playlist"), e.classList.add("cindrM-repeating-none") }) : "song" == n ? t.forEach(e => { e.classList.remove("cindrM-repeating-none"), e.classList.add("cindrM-repeating-song") }) : t.forEach(e => { e.classList.remove("cindrM-repeating-song"), e.classList.add("cindrM-repeating-playlist") }) }, volumeControl: function (e) { document.querySelectorAll('[data-cindrM-control~="volume"]').forEach(n => l.node(n, e.detail.volume)) }, muteControl: function (e) { const n = document.querySelectorAll('[data-cindrM-control~="mute"]'); e.detail.muted ? n.forEach(e => e.classList.add("cindrM-muted")) : n.forEach(e => e.classList.remove("cindrM-muted")) }, progressControl: function (e) { const n = e.detail; if (!Object.is(n.duration, NaN)) { document.querySelectorAll('[data-cindrM-control~="progress"]').forEach(e => l.node(e, n.currentTime / n.duration)) } }, bufferControl: function (e) { const n = e.detail; if (n.buffered.length > 0 && !Object.is(n.duration, NaN)) { document.querySelectorAll('[data-cindrM-control~="buffer"]').forEach(e => l.node(e, n.buffered.end(n.buffered.length - 1) / n.duration)) } }, song: function (e, n, t) { t = t || { clean: !1, current: !1 }, e.querySelectorAll("[data-cindrM-song-info]").forEach(e => { const i = e.getAttribute("data-cindrM-song-info"); Object.keys(n.song).includes(i) ? l.node(e, n.song[i], t.clean) : r.warn("Ignoring invalid cindrM-song-info value request.", i) }), l.meta(e, n, t.clean), t.current && e.classList.add("cindrM-current-song") }, meta: function (e, n, t) { e.querySelectorAll("[data-cindrM-song-meta]").forEach(e => { const i = e.getAttribute("data-cindrM-song-meta"); if (Object.keys(n).filter(e => "song" != e).includes(i)) { const o = i.indexOf("-readable"); -1 != o && Object.is(n[i.substring(0, o)], NaN) || l.node(e, n[i], t) } else r.warn("Ignoring invalid cindrM-song-meta value request.", i) }) }, node: function (e, n, t) { if (["IMG"].includes(e.nodeName) ? e.src = n : ["PROGRESS", "INPUT"].includes(e.nodeName) ? e.value = n : e.firstChild ? e.firstChild.nodeValue = n : e.textContent = n, t) for (let n = e.attributes.length - 1; n >= 0; n--) { const t = e.attributes[n].nodeName; t.startsWith("data-") && e.removeAttribute(t) } } }, r = { warn: function (e, n) { console.warn(e + " [(" + typeof n + ") " + n + "]") }, info: function (e, n) { console.info(e + " [(" + typeof n + ") " + n + "]") } }, s = function (e) { if (!Object.is(e, NaN)) { const n = Math.floor(e / 3600), t = Math.floor(e % 3600 / 60), i = Math.floor(e % 3600 % 60); return n > 0 ? n + ":" + ("0" + t).slice(-2) + ("0" + i).slice(-2) : t + ":" + ("0" + i).slice(-2) } }, d = { raise: function (n, t) { e.dispatchEvent(new CustomEvent(n, { detail: t })) }, play: () => d.raise("play"), pause: () => d.raise("pause"), end: () => d.raise("end"), timeupdate: () => d.raise("timeupdate", { currentTime: n.audio.currentTime, "currentTime-readable": s(n.audio.currentTime), duration: n.audio.duration, "duration-readable": s(n.audio.duration), buffered: n.audio.buffered }), songchange: () => d.raise("songchange", { song: n.playlist[n.index], index: n.index, "index-readable": n.index + 1, currentTime: n.audio.currentTime, "currentTime-readable": s(n.audio.currentTime), duration: n.audio.duration, "duration-readable": s(n.audio.duration) }), playlistchange: () => d.raise("playlistchange", { playlist: n.playlist, index: n.index, "index-readable": n.index + 1 }), shufflechange: () => d.raise("shufflechange", { shuffle: n.shuffle }), repeatchange: () => d.raise("repeatchange", { repeat: n.repeat }), volumechange: () => d.raise("volumechange", { volume: n.volume, muted: n.muted }) }; e.song = { play: function () { n.playlist.length >= 0 ? n.index > -1 ? (n.audio.play(), d.play()) : e.playlist.play() : r.warn("Playlist empty; ignoring call to song.play().") }, pause: function () { n.playlist.length >= 0 ? (n.audio.pause(), d.pause()) : r.warn("Playlist empty; ignoring call to song.pause().") }, stop: function () { n.playlist.length >= 0 ? (e.song.pause(), n.audio.currentTime = 0) : r.warn("Playlist empty; ignoring call to song.stop().") }, next: function () { n.playlist.length > 0 ? n.shuffle ? a.next() : n.index + 1 < n.playlist.length ? e.playlist.seek(n.index + 1) : e.playlist.play() : r.warn("Playlist empty; ignoring call to song.next().") }, previous: function () { n.playlist.length > 0 ? (n.audio.currentTime > 2 && n.audio.duration > 2 ? n.audio.currentTime = 0 : n.shuffle ? a.previous() : n.index > 0 ? e.playlist.seek(n.index - 1) : e.playlist.seek(n.playlist.length - 1), d.songchange()) : r.warn("Playlist empty; ignoring call to song.previous().") }, seekPercent: function (e) { n.playlist.length >= 0 ? o(e, 0) && i(e, 100) ? n.audio.currentTime = n.audio.duration * (e / 100) : r.warn("Ignoring invalid value sent to song.seekPercent(percent).", e) : r.warn("Playlist empty; ignoring call to song.seekPercent().") }, seekTime: function (e) { n.playlist.length >= 0 ? o(e, 0) && i(e, n.audio.duration) ? n.audio.currentTime = e : r.warn("Ignoring invalid value sent to song.seekTime(seconds).", e) : r.warn("Playlist empty; ignoring call to song.seekTime().") } }, e.playlist = { add: function (e) { n.playlist.push(e), -1 == n.index && (n.index = 0, n.audio.src = n.playlist[n.index].url, d.songchange()), a.reset(), d.playlistchange() }, insert: function (t, l) { o(t, 0) && i(t, n.playlist.length) ? t == n.playlist.length ? e.playlist.add(l) : (t <= n.index && n.index++, n.playlist.splice(t, 0, l), a.reset(), d.playlistchange()) : r.warn("Ignoring invalid value sent to playlist.insert(index, song).", t) }, remove: function (i) { if (o(i, 0) && t(i, n.playlist.length)) { let t = null; return i < n.index ? (t = n.playlist.splice(i, 1), n.index--) : i == n.index ? (n.audio.pause(), n.audio.currentTime = 0, n.index + 1 < n.playlist.length ? (t = n.playlist.splice(i, 1), e.playlist.seek(n.index)) : n.index > 0 ? (t = n.playlist.splice(i, 1), n.index--) : (t = n.playlist, n.index = -1, n.playlist = [])) : t = n.playlist.splice(i, 1), a.reset(), d.playlistchange(), t[0] } r.warn("Ignoring invalid value sent to playlist.remove(index).", i) }, clear: function () { n.playlist.length > 0 && e.playlist.replace([]) }, replace: function (e) { n.audio.pause(), n.audio.currentTime = 0, e.length > 0 ? (n.index = 0, n.playlist = e, n.audio.src = n.playlist[n.index].url, d.songchange()) : (n.index = -1, n.playlist = [], n.audio.src = null), a.reset(), d.playlistchange() }, play: function () { n.playlist.length > 0 ? e.playlist.seek(0) : r.warn("Playlist empty; ignoring call to playlist.play().") }, seek: function (e) { o(e, 0) && t(e, n.playlist.length) ? (n.index = e, n.audio.pause(), n.audio.currentTime = 0, n.audio.src = n.playlist[n.index].url, n.audio.play(), a.reset(), d.songchange(), d.play()) : r.warn("Ignoring invalid value sent to playlist.seek(index).", e) } }, e.player = { volume: function (e) { if (!o(e, 0) || !i(e, 100)) return r.info("No valid value sent to player.volume(volume); returning current volume.", e), n.volume; (n.muted || e != n.volume) && (n.volume = e, n.audio.volume = n.volume / 100, d.volumechange()) }, mute: function (e) { if (!0 !== e && !1 !== e) return r.info("No valid value sent to player.mute(mute); returning current mute state.", e), n.muted; e != n.muted && (n.muted = e, n.audio.volume = n.muted ? 0 : n.volume / 100, d.volumechange()) }, shuffle: function (e) { if (!0 !== e && !1 !== e) return r.info("No valid value sent to player.shuffle(shuffle); returning current shuffle state.", e), n.shuffle; e != n.shuffle && (n.shuffle = e, a.reset(), d.shufflechange()) }, repeat: function (e) { if ("none" !== e && "song" !== e && "playlist" !== e) return r.info("No valid value sent to player.repeat(value); returning current repeat type.", e), n.repeat; e != n.repeat && (n.repeat = e, d.repeatchange()) } }, e.ui = { monitor: function () { const t = document.getElementById("cindrM-song-list-container"); if (t) { const i = document.getElementById("cindrM-song-container"); i && (n.monitoring = { songList: t, songListTemplate: i.parentElement.removeChild(i) }, e.addEventListener("playlistchange", l.songList)) } if ((document.querySelector("[data-cindrM-song-info]") || document.querySelector("[data-cindrM-song-meta]")) && e.addEventListener("songchange", l.currentSongInfo), document.querySelector("[data-cindrM-song-meta]") && e.addEventListener("timeupdate", l.currentTime), document.querySelector("[data-cindrM-control]")) { document.querySelectorAll('[data-cindrM-control~="play"]').forEach(n => n.addEventListener("click", function () { this.classList.contains("cindrM-playing") || e.song.play() })), e.addEventListener("play", l.playControl), document.querySelectorAll('[data-cindrM-control~="pause"]').forEach(n => n.addEventListener("click", function () { this.classList.contains("cindrM-paused") || e.song.pause() })), e.addEventListener("pause", l.pauseControl), document.querySelectorAll('[data-cindrM-control~="stop"]').forEach(n => n.addEventListener("click", function () { this.classList.contains("cindrM-paused") || e.song.stop() })), document.querySelectorAll('[data-cindrM-control~="next"]').forEach(n => { n.addEventListener("click", e.song.next) }), document.querySelectorAll('[data-cindrM-control~="previous"]').forEach(n => { n.addEventListener("click", e.song.previous) }), document.querySelectorAll('[data-cindrM-control~="shuffle"]').forEach(t => t.addEventListener("click", function () { e.player.shuffle(!n.shuffle) })), e.addEventListener("shufflechange", l.shuffleControl); const t = { none: "song", song: "playlist", playlist: "none" }; document.querySelectorAll('[data-cindrM-control~="repeat"]').forEach(i => i.addEventListener("click", function () { e.player.repeat(t[n.repeat]) })), e.addEventListener("repeatchange", l.repeatControl), document.querySelectorAll('[data-cindrM-control~="volume"]').forEach(n => { const t = function () { e.player.mute(!1), e.player.volume(parseFloat(this.value)) }; n.addEventListener("mousedown", t), n.addEventListener("input", t), n.addEventListener("change", t) }), e.addEventListener("volumechange", l.volumeControl), document.querySelectorAll('[data-cindrM-control~="mute"]').forEach(t => t.addEventListener("click", function () { e.player.mute(!n.muted) })), e.addEventListener("volumechange", l.muteControl), e.addEventListener("timeupdate", l.progressControl), document.querySelectorAll('[data-cindrM-control~="seek"]').forEach(n => n.addEventListener("click", function (n) { let t = null; if (this.offsetWidth > this.offsetHeight) { t = (n.pageX - this.getBoundingClientRect().left) / this.offsetWidth } else { t = (n.pageY - this.getBoundingClientRect().top) / this.offsetHeight } e.song.seekPercent(100 * t) })), e.addEventListener("timeupdate", l.bufferControl), d.pause(), d.repeatchange() } } }, e.getInternals = (() => n) }(cindrM);
