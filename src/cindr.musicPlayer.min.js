const cindrM = new EventTarget; !function (o) { const i = { audio: document.createElement("audio"), volume: -1, muted: !1, index: -1, playlist: [], shuffled: [], shuffle: !1, repeat: "none", monitoring: null }; i.audio.addEventListener("ended", () => { "song" == i.repeat ? o.song.play() : !i.shuffle && i.index + 1 < i.playlist.length || i.shuffle && i.shuffled.indexOf(i.index) + 1 < i.shuffled.length ? o.song.next() : "playlist" == i.repeat ? o.playlist.play() : o.song.stop() }), i.audio.setAttribute("preload", "auto"), i.audio.addEventListener("timeupdate", () => d.timeupdate()), i.audio.addEventListener("progress", () => d.timeupdate()), i.audio.addEventListener("loadedmetadata", () => d.timeupdate()), i.audio.addEventListener("ended", () => d.end()), i.volume = 100 * i.audio.volume; var n = function (e, n) { return typeof e == typeof n && e < n }, t = function (e, n) { return typeof e == typeof n && e <= n }, a = function (e, n) { return typeof e == typeof n && n <= e }; const l = { reset: function () { var e; i.shuffle ? (i.shuffled = [...Array(i.playlist.length).keys()].sort(() => Math.random() - .5), e = i.shuffled.indexOf(i.index), [i.shuffled[0], i.shuffled[e]] = [i.shuffled[e], i.shuffled[0]]) : i.shuffled = [] }, next: function () { var e = i.shuffled.indexOf(i.index) + 1, n = e < i.shuffled.length ? e : 0; l.play(n) }, previous: function () { var e = i.shuffled.indexOf(i.index), e = (0 < e ? e : i.shuffled.length) - 1; l.play(e) }, play: function (e) { i.index = i.shuffled[e], i.audio.pause(), i.audio.currentTime = 0, i.audio.src = i.playlist[i.index].url, i.audio.play(), d.songchange(), d.play() } }, r = { songList: function (e) { const o = e.detail; for (; i.monitoring.songList.firstChild;)i.monitoring.songList.removeChild(i.monitoring.songList.lastChild); o.playlist.forEach((e, n) => { const t = i.monitoring.songListTemplate.cloneNode(!0); t.id += "-" + n, r.song(t, { song: e, index: n, "index-readable": n + 1 }, { clean: !0, current: n == o.index }), i.monitoring.songList.appendChild(t) }) }, currentSongInfo: function (e) { var n = e.detail; if (r.song(document, n), i.monitoring) { var t = i.monitoring.songList.querySelectorAll('[id*="cindrM-song-container-"]'); for (let e = 0; e < t.length; e++) { const o = t[e]; e == n.index ? o.classList.add("cindrM-current-song") : o.classList.remove("cindrM-current-song") } } }, currentTime: function (e) { e = e.detail; r.meta(document, e) }, playControl: function () { document.querySelectorAll('[data-cindrM-control~="play"]').forEach(e => e.classList.add("cindrM-control-playing")), ["pause", "stop"].forEach(e => { document.querySelectorAll('[data-cindrM-control~="' + e + '"]').forEach(e => e.classList.remove("cindrM-control-paused")) }) }, pauseControl: function () { document.querySelectorAll('[data-cindrM-control~="play"]').forEach(e => e.classList.remove("cindrM-control-playing")), ["pause", "stop"].forEach(e => { document.querySelectorAll('[data-cindrM-control~="' + e + '"]').forEach(e => e.classList.add("cindrM-control-paused")) }) }, shuffleControl: function (e) { const n = document.querySelectorAll('[data-cindrM-control~="shuffle"]'); e.detail.shuffle ? n.forEach(e => e.classList.add("cindrM-control-shuffling")) : n.forEach(e => e.classList.remove("cindrM-control-shuffling")) }, repeatControl: function (e) { e = e.detail.repeat; const n = document.querySelectorAll('[data-cindrM-control~="repeat"]'); "none" == e ? n.forEach(e => { e.classList.remove("cindrM-control-repeat-playlist"), e.classList.add("cindrM-control-repeat-none") }) : "song" == e ? n.forEach(e => { e.classList.remove("cindrM-control-repeat-none"), e.classList.add("cindrM-control-repeat-song") }) : n.forEach(e => { e.classList.remove("cindrM-control-repeat-song"), e.classList.add("cindrM-control-repeat-playlist") }) }, volumeControl: function (n) { const e = document.querySelectorAll('[data-cindrM-control~="volume"]'); e.forEach(e => r.node(e, n.detail.volume)) }, muteControl: function (e) { const n = document.querySelectorAll('[data-cindrM-control~="mute"]'); e.detail.muted ? n.forEach(e => e.classList.add("cindrM-control-muted")) : n.forEach(e => e.classList.remove("cindrM-control-muted")) }, progressControl: function (e) { var n = e.detail; if (!Object.is(n.duration, NaN)) { const t = document.querySelectorAll('[data-cindrM-control~="progress"]'); t.forEach(e => r.node(e, n.currentTime / n.duration)) } }, bufferControl: function (e) { const n = e.detail; if (0 < n.buffered.length && !Object.is(n.duration, NaN)) { const t = document.querySelectorAll('[data-cindrM-control~="buffer"]'); t.forEach(e => r.node(e, n.buffered.end(n.buffered.length - 1) / n.duration)) } }, song: function (e, t, o) { o = o || { clean: !1, current: !1 }; const n = e.querySelectorAll("[data-cindrM-song-info]"); n.forEach(e => { var n = e.getAttribute("data-cindrM-song-info"); Object.keys(t.song).includes(n) ? r.node(e, t.song[n], o.clean) : s.warn("Ignoring invalid cindrM-song-info value request.", n) }), r.meta(e, t, o.clean), o.current && e.classList.add("cindrM-current-song") }, meta: function (e, o, i) { const n = e.querySelectorAll("[data-cindrM-song-meta]"); n.forEach(e => { const n = e.getAttribute("data-cindrM-song-meta"); var t; Object.keys(o).filter(e => "song" != e).includes(n) ? -1 != (t = n.indexOf("-readable")) && Object.is(o[n.substring(0, t)], NaN) || r.node(e, o[n], i) : s.warn("Ignoring invalid cindrM-song-meta value request.", n) }) }, node: function (n, e, t) { if (["IMG"].includes(n.nodeName) ? n.src = e : ["PROGRESS", "INPUT"].includes(n.nodeName) ? n.value = e : n.firstChild ? n.firstChild.nodeValue = e : n.textContent = e, t) for (let e = n.attributes.length - 1; 0 <= e; e--) { const o = n.attributes[e].nodeName; o.startsWith("data-") && n.removeAttribute(o) } } }, s = { warn: function (e, n) { console.warn(e + " [(" + typeof n + ") " + n + "]") }, info: function (e, n) { console.info(e + " [(" + typeof n + ") " + n + "]") } }; var e = function (e) { if (!Object.is(e, NaN)) { var n = Math.floor(e / 3600), t = Math.floor(e % 3600 / 60), e = Math.floor(e % 3600 % 60); return 0 < n ? n + ":" + ("0" + t).slice(-2) + ("0" + e).slice(-2) : t + ":" + ("0" + e).slice(-2) } }; const d = { raise: function (e, n) { o.dispatchEvent(new CustomEvent(e, { detail: n })) }, play: () => d.raise("play"), pause: () => d.raise("pause"), end: () => d.raise("end"), timeupdate: () => d.raise("timeupdate", { currentTime: i.audio.currentTime, "currentTime-readable": e(i.audio.currentTime), duration: i.audio.duration, "duration-readable": e(i.audio.duration), buffered: i.audio.buffered }), songchange: () => d.raise("songchange", { song: i.playlist[i.index], index: i.index, "index-readable": i.index + 1, currentTime: i.audio.currentTime, "currentTime-readable": e(i.audio.currentTime), duration: i.audio.duration, "duration-readable": e(i.audio.duration) }), playlistchange: () => d.raise("playlistchange", { playlist: i.playlist, index: i.index }), shufflechange: () => d.raise("shufflechange", { shuffle: i.shuffle }), repeatchange: () => d.raise("repeatchange", { repeat: i.repeat }), volumechange: () => d.raise("volumechange", { volume: i.volume, muted: i.muted }) }; o.song = { play: function () { 0 <= i.playlist.length ? -1 < i.index ? (i.audio.play(), d.play()) : o.playlist.play() : s.warn("Playlist empty; ignoring call to song.play().") }, pause: function () { 0 <= i.playlist.length ? (i.audio.pause(), d.pause()) : s.warn("Playlist empty; ignoring call to song.pause().") }, stop: function () { 0 <= i.playlist.length ? (o.song.pause(), i.audio.currentTime = 0) : s.warn("Playlist empty; ignoring call to song.stop().") }, next: function () { 0 < i.playlist.length ? i.shuffle ? l.next() : i.index + 1 < i.playlist.length ? o.playlist.seek(i.index + 1) : o.playlist.play() : s.warn("Playlist empty; ignoring call to song.next().") }, previous: function () { 0 < i.playlist.length ? (2 < i.audio.currentTime && 2 < i.audio.duration ? i.audio.currentTime = 0 : i.shuffle ? l.previous() : 0 < i.index ? o.playlist.seek(i.index - 1) : o.playlist.seek(i.playlist.length - 1), d.songchange()) : s.warn("Playlist empty; ignoring call to song.previous().") }, seekPercent: function (e) { 0 <= i.playlist.length ? a(e, 0) && t(e, 100) ? i.audio.currentTime = i.audio.duration * (e / 100) : s.warn("Ignoring invalid value sent to song.seekPercent(percent).", e) : s.warn("Playlist empty; ignoring call to song.seekPercent().") }, seekTime: function (e) { 0 <= i.playlist.length ? a(e, 0) && t(e, i.audio.duration) ? i.audio.currentTime = e : s.warn("Ignoring invalid value sent to song.seekTime(seconds).", e) : s.warn("Playlist empty; ignoring call to song.seekTime().") } }, o.playlist = { add: function (e) { i.playlist.push(e), -1 == i.index && (i.index = 0, i.audio.src = i.playlist[i.index].url, d.songchange()), l.reset(), d.playlistchange() }, insert: function (e, n) { a(e, 0) && t(e, i.playlist.length) ? e == i.playlist.length ? o.playlist.add(n) : (e <= i.index && i.index++, i.playlist.splice(e, 0, n), l.reset(), d.playlistchange()) : s.warn("Ignoring invalid value sent to playlist.insert(index, song).", e) }, remove: function (e) { a(e, 0) && n(e, i.playlist.length) ? (e < i.index ? (i.playlist.splice(e, 1), i.index--) : e == i.index ? (i.audio.pause(), i.audio.currentTime = 0, i.index + 1 < i.playlist.length ? (i.playlist.splice(e, 1), o.playlist.seek(i.index)) : 0 < i.index ? (i.playlist.splice(e, 1), i.index--) : (i.index = -1, i.playlist = [])) : i.playlist.splice(e, 1), l.reset(), d.playlistchange()) : s.warn("Ignoring invalid value sent to playlist.remove(index).", e) }, clear: function () { 0 < i.playlist.length && o.playlist.replace([]) }, replace: function (e) { i.audio.pause(), (i.audio.currentTime = 0) < e.length ? (i.index = 0, i.playlist = e, i.audio.src = i.playlist[i.index].url, d.songchange()) : (i.index = -1, i.playlist = [], i.audio.src = null), l.reset(), d.playlistchange() }, play: function () { 0 < i.playlist.length ? o.playlist.seek(0) : s.warn("Playlist empty; ignoring call to playlist.play().") }, seek: function (e) { a(e, 0) && n(e, i.playlist.length) ? (i.index = e, i.audio.pause(), i.audio.currentTime = 0, i.audio.src = i.playlist[i.index].url, i.audio.play(), l.reset(), d.songchange(), d.play()) : s.warn("Ignoring invalid value sent to playlist.seek(index).", e) } }, o.player = { volume: function (e) { if (!a(e, 0) || !t(e, 100)) return s.info("No valid value sent to player.volume(volume); returning current volume.", e), i.volume; !i.muted && e == i.volume || (i.volume = e, i.audio.volume = i.volume / 100, d.volumechange()) }, mute: function (e) { if (!0 !== e && !1 !== e) return s.info("No valid value sent to player.mute(mute); returning current mute state.", e), i.muted; e != i.muted && (i.muted = e, i.audio.volume = i.muted ? 0 : i.volume / 100, d.volumechange()) }, shuffle: function (e) { if (!0 !== e && !1 !== e) return s.info("No valid value sent to player.shuffle(shuffle); returning current shuffle state.", e), i.shuffle; e != i.shuffle && (i.shuffle = e, l.reset(), d.shufflechange()) }, repeat: function (e) { if ("none" !== e && "song" !== e && "playlist" !== e) return s.info("No valid value sent to player.repeat(value); returning current repeat state.", e), i.repeat; e != i.repeat && (i.repeat = e, d.repeatchange()) } }, o.ui = { monitor: function () { var n, e = document.getElementById("cindrM-song-list-container"); if (e) { const t = document.getElementById("cindrM-song-container"); t && (i.monitoring = { songList: e, songListTemplate: t.parentElement.removeChild(t) }, o.addEventListener("playlistchange", r.songList)) } (document.querySelector("[data-cindrM-song-info]") || document.querySelector("[data-cindrM-song-meta]")) && o.addEventListener("songchange", r.currentSongInfo), document.querySelector("[data-cindrM-song-meta]") && o.addEventListener("timeupdate", r.currentTime), document.querySelector("[data-cindrM-control]") && (document.querySelectorAll('[data-cindrM-control~="play"]').forEach(e => e.addEventListener("click", function () { this.classList.contains("cindrM-control-playing") || o.song.play() })), o.addEventListener("play", r.playControl), document.querySelectorAll('[data-cindrM-control~="pause"]').forEach(e => e.addEventListener("click", function () { this.classList.contains("cindrM-control-paused") || o.song.pause() })), o.addEventListener("pause", r.pauseControl), document.querySelectorAll('[data-cindrM-control~="stop"]').forEach(e => e.addEventListener("click", function () { this.classList.contains("cindrM-control-paused") || o.song.stop() })), document.querySelectorAll('[data-cindrM-control~="next"]').forEach(e => { e.addEventListener("click", o.song.next) }), document.querySelectorAll('[data-cindrM-control~="previous"]').forEach(e => { e.addEventListener("click", o.song.previous) }), document.querySelectorAll('[data-cindrM-control~="shuffle"]').forEach(e => e.addEventListener("click", function () { o.player.shuffle(!i.shuffle) })), o.addEventListener("shufflechange", r.shuffleControl), n = { none: "song", song: "playlist", playlist: "none" }, document.querySelectorAll('[data-cindrM-control~="repeat"]').forEach(e => e.addEventListener("click", function () { o.player.repeat(n[i.repeat]) })), o.addEventListener("repeatchange", r.repeatControl), document.querySelectorAll('[data-cindrM-control~="volume"]').forEach(e => { function n() { o.player.mute(!1), o.player.volume(parseFloat(this.value)) } e.addEventListener("mousedown", n), e.addEventListener("input", n), e.addEventListener("change", n) }), o.addEventListener("volumechange", r.volumeControl), document.querySelectorAll('[data-cindrM-control~="mute"]').forEach(e => e.addEventListener("click", function () { o.player.mute(!i.muted) })), o.addEventListener("volumechange", r.muteControl), o.addEventListener("timeupdate", r.progressControl), document.querySelectorAll('[data-cindrM-control~="seek"]').forEach(e => e.addEventListener("click", function (e) { var n = this.offsetWidth > this.offsetHeight; let t = null; t = n ? (e.pageX - this.getBoundingClientRect().left) / this.offsetWidth : (e.pageY - this.getBoundingClientRect().top) / this.offsetHeight, o.song.seekPercent(100 * t) })), o.addEventListener("timeupdate", r.bufferControl), d.pause(), d.repeatchange()) } }, o.getInternals = () => i }(cindrM);
